О параллелизме в GO:

В языке Go нет концепции потоков, как и инструментов для работы с ними. Вместо этого авторы предлагают работать с горутинами.

Ввиду того, что на уровне языка нет разделения на потоки и горутины, эти два термины могут использоваться как синонимы в контексте языка Go.

Goroutines также имеют доступ к общей памяти, а Go предоставляет блокировки для защиты объектов в общей памяти так же, как это делают классические языки программирования.

Общая память полезна во многих случаях, но Go предоставляет еще и другой способ обработки связи и синхронизации между Goroutines. Он основан на модели параллелизма Communicating Sequential Processes (CSP), описанной специалистом в области информатики и вычислительной техники, разработчиком алгоритма «быстрой сортировки» Ч. Э. Р. Хоаром


отличие асинхронности в Go от асинхронности в других языках — строго говоря любые функции могут использоваться как синхронно, так и асинхронно

Go скрывает от разработчика тяжелую работу с потоками операционной системы, беря эту ношу на себя, а в замен предоставляет горутины — гораздо более удобный и гибкий инструмент для работы с конкурентными вычислениями.

Горутина гораздо легковеснее потока, поэтому их можно создавать миллионами и не страдать от этого;
Горутины контролируются на уровне программы, а не операционной системы;
На одном потоке может исполняться несколько горутин.

По умолчанию Go использует мультиплексирование горутин поверх небольшого числа системных потоков, но можно управлять количеством этих системных потоков через настройку. Тем не менее, непосредственное создание и управление системными потоками через Go не является стандартной возможностью.

**********************

Как идентифицируются горутины в го?

В Go горутины идентифицируются через уникальные идентификаторы, которые автоматически управляются средой выполнения (runtime). Однако, в стандартной библиотеке Go нет публичного способа явно получить или установить идентификатор горутины.

**********************

Каков порядок вывода сообщений горутинами? Всегда ли он одинаков? Чем определяется этот порядок?


Порядок вывода сообщений из горутин может быть непредсказуемым из-за особенностей параллельного выполнения. Он зависит от распределения времени процессора между горутинами, которое управляется планировщиком горутин (goroutine scheduler) в Go

*********************


